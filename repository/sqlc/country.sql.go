// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: country.sql

package repository

import (
	"context"
	"database/sql"
)

const createCountry = `-- name: CreateCountry :execresult
INSERT IGNORE INTO country(
    ` + "`" + `ISO2` + "`" + `,
    name
) VALUES (
    ?, ?
)
`

type CreateCountryParams struct {
	Iso2 string `json:"iso2"`
	Name string `json:"name"`
}

func (q *Queries) CreateCountry(ctx context.Context, arg CreateCountryParams) (sql.Result, error) {
	return q.exec(ctx, q.createCountryStmt, createCountry, arg.Iso2, arg.Name)
}

const createCountryBulk = `-- name: CreateCountryBulk :copyfrom
INSERT IGNORE INTO country(
    ` + "`" + `ISO2` + "`" + `,
    name
) VALUES (
    ?, ?
)
`

type CreateCountryBulkParams struct {
	Iso2 string `json:"iso2"`
	Name string `json:"name"`
}

const getCountryByCountryISO2 = `-- name: GetCountryByCountryISO2 :one
SELECT iso2, name FROM country
WHERE ` + "`" + `ISO2` + "`" + ` = ? LIMIT 1
`

func (q *Queries) GetCountryByCountryISO2(ctx context.Context, iso2 string) (Country, error) {
	row := q.queryRow(ctx, q.getCountryByCountryISO2Stmt, getCountryByCountryISO2, iso2)
	var i Country
	err := row.Scan(&i.Iso2, &i.Name)
	return i, err
}
